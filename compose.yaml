x-ts-sidecar: &ts-sidecar
  # volumes:
  #   - ts_state:/ts_state
  image: tailscale/tailscale:latest
  environment: &ts-env
    TS_AUTHKEY: ${TS_AUTHKEY}
    TS_EXTRA_ARGS: "--advertise-tags=tag:docker"
    #TS_USERSPACE: false
    TS_ENABLE_HEALTH_CHECK: true
    #TS_LOCAL_ADDR_PORT: 127.0.0.1:41234
    TS_STATE: "mem:"
    #TS_SERVE_CONFIG: /config/serve.json
    #TS_AUTHKEY: tskey-auth-kS5WUC4XYe11CNTRL-AT7DucG3DnhrX8j6rmPdhhcuN2mRerBk
    #TS_HOSTNAME: generic-sidecar
  #    ports:
  #      - "8120"
  #    devices:
  #      - /dev/net/tun:/dev/net/tun # Network configuration for Tailscale to work
  #    cap_add:
  #      - net_admin # Tailscale requirement
  #      - sys_module # Tailscale requirement
  healthcheck:
    test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:41234/healthz"] # Check Tailscale has a Tailnet IP and is operational
    interval: 1m # How often to perform the check
    timeout: 10s # Time to wait for the check to succeed
    retries: 3 # Number of retries before marking as unhealthy
    start_period: 10s # Time to wait before starting health checks
  restart: always
services:
  # traefik-kop-public:
  #   image: "ghcr.io/jittering/traefik-kop:latest"
  #   restart: unless-stopped
  #   environment:
  #     - "REDIS_ADDR=traefik-external-redis:6379"
  #     - "NAMESPACE=public"
  #     - "DOCKER_HOST=tcp://socket-proxy:2375"
  #     - "KOP_HOSTNAME=${HOSTNAME:-generic}-public"
  #     - "BIND_IP=${BIND_IP}"
  #   depends_on:
  #     - socket-proxy
  #   networks:
  #     - default
  #     - kop_net
  traefik-ts:
    <<: *ts-sidecar
    environment:
      <<: *ts-env
      TS_HOSTNAME: "${HOSTNAME:-generic}-internal"
  traefik-kop-internal:
    network_mode: service:traefik-ts
    image: "ghcr.io/jittering/traefik-kop:latest"
    restart: unless-stopped
    environment:
      - "REDIS_ADDR=traefik-internal-redis.shark-perch.ts.net:6379"
      - "DOCKER_HOST=tcp://socket-proxy:2375"
      - "KOP_HOSTNAME=${HOSTNAME:-generic}-internal"
      - "BIND_IP=${BIND_IP}"
    depends_on:
      - socket-proxy
    #networks:
    #  - default
    #- kop_net
  socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:latest
    networks:
      - default
    environment:
      - ALLOW_START=0
      - ALLOW_STOP=0
      - ALLOW_RESTARTS=0
      - CONTAINERS=1
      - EVENTS=1
      - INFO=1
      - NETWORKS=1
      - POST=0
      - SERVICES=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    security_opt:
      - no-new-privileges:true
    restart: always
    read_only: true
    tmpfs:
      - /run
networks:
  kop_net:
    external: true
